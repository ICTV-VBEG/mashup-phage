import os


configfile: "config/config.yaml"


rule all:
    input:
        tsv=expand(
            "results/mash/{genome_fasta}.s{mash_s}.k{mash_k}.d{mash_d}.tsv",
            genome_fasta=config["inphared_genomes"],
            mash_k=config["mash"]["sketch"]["k"],
            mash_s=config["mash"]["sketch"]["s"],
            mash_d=config["mash"]["dist"]["d"],
        ),


# TODO: use inphared download wrapper once available, for progress see:
#       https://github.com/snakemake/snakemake-wrappers/pull/1550
rule download:
    output:
        fa="resources/{genome_fasta}.fa",
    log:
        "logs/resources/{genome_fasta}.download.log",
    conda:
        "envs/curl_pigz.yaml"
    shell:
        """
        curl https://millardlab-inphared.s3.climb.ac.uk/{wildcards.genome_fasta}.fa.gz | pigz -d >{output.fa}
        """


rule mash_sketch:
    input:
        fa="resources/{genome_fasta}.fa",
    output:
        msh="results/mash/{genome_fasta}.k{mash_k}.s{mash_s}.fa.msh",
    log:
        "logs/mash/{genome_fasta}.k{mash_k}.s{mash_s}.fa.mash_sketch.log",
    params:
        prefix=lambda wc, output: os.path.splitext(output.msh)[0],
    conda:
        "envs/mash.yaml"
    threads: workflow.cores
    shell:
        """
        mash sketch -i -k {wildcards.mash_k} -s {wildcards.mash_s} -p {threads} -o {params.prefix} {input.fa}
        """


rule mash_dist:
    input:
        msh="results/mash/{genome_fasta}.k{mash_k}.s{mash_s}.fa.msh",
    output:
        tsv="results/mash/{genome_fasta}.k{mash_k}.s{mash_s}.d{mash_d}.tsv",
    log:
        "logs/mash/{genome_fasta}.k{mash_k}.s{mash_s}.d{mash_d}.mash_dist.log",
    conda:
        "envs/mash.yaml"
    threads: workflow.cores
    shell:
        """
        mash dist -i -d {wildcards.mash_d} -p {threads} {input.msh} {input.msh} \
        > {output.tsv}
        """
